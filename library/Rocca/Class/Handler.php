<?php// using class constants/properties/methods can sometimes be a pain// this provides an object oriented way of handling itclass Rocca_Class_Handler{		use Rocca_Model_GetSet;	use Rocca_Data;	use Rocca_HandleCall;			protected static $_aClassHandlers = array();			protected $_aCallables = array( 'Model' );		protected $_sHandledClass = '';				//// static methods, isn't it ironic, don't you think?		// get handler class	public static function factory() {				$aArgs = func_get_args();				$sHandledClass = array_shift( $aArgs );				// instantiate, if it doesn't exist		if ( !self::$_aClassHandlers[ $sHandledClass ] ) {						$sHandlerClass = array_shift( $aArgs );						if ( $sHandlerClass && is_subclass_of( $sHandlerClass, Rocca_Class_Handler ) ) {				self::$_aClassHandlers[ $sHandledClass ] = new $sHandlerClass( $sHandledClass, $aArgs );			}		}				return self::$_aClassHandlers[ $sHandledClass ];	}				//// instance methods		//	public function __construct( $sHandledClass, $aArgs ) {				$this->_sHandledClass = $sHandledClass;				// $aArgs are handled by sub-class	}			}